diff -Naru shm/gstshmsink.c /tmp/shm/gstshmsink.c
--- shm/gstshmsink.c	2023-06-27 18:36:41.815725004 +0200
+++ /tmp/shm/gstshmsink.c	2023-06-27 18:36:28.187575808 +0200
@@ -41,6 +41,7 @@
 #include <gst/gst.h>
 
 #include <string.h>
+#include <gst/video/video-info.h>
 
 /* signals */
 enum
@@ -58,7 +59,8 @@
   PROP_PERMS,
   PROP_SHM_SIZE,
   PROP_WAIT_FOR_CONNECTION,
-  PROP_BUFFER_TIME
+  PROP_BUFFER_TIME,
+  PROP_LEAKY
 };
 
 struct GstShmClient
@@ -71,6 +73,7 @@
 #define DEFAULT_WAIT_FOR_CONNECTION (TRUE)
 /* Default is user read/write, group read */
 #define DEFAULT_PERMS ( S_IRUSR | S_IWUSR | S_IRGRP )
+#define DEFAULT_LEAKY (FALSE)
 
 
 GST_DEBUG_CATEGORY_STATIC (shmsink_debug);
@@ -309,10 +312,9 @@
   GST_OBJECT_UNLOCK (self->sink);
 
   if (!memory) {
-    memory = gst_allocator_alloc (NULL, size, params);
-    GST_LOG_OBJECT (self,
+    GST_ERROR_OBJECT (self,
         "Not enough shared memory for GstMemory of %" G_GSIZE_FORMAT
-        "bytes, allocating using standard allocator", size);
+        "bytes", size);
   }
 
   return memory;
@@ -417,6 +419,15 @@
           -1, G_MAXINT64, -1,
           G_PARAM_CONSTRUCT | G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
+  g_object_class_install_property (gobject_class, PROP_LEAKY,
+      g_param_spec_boolean ("leaky",
+          "If TRUE, then shmsink will drop any buffers that are pushed into it "
+          "once there are no available shm memory",
+          "If TRUE, then shmsink will drop any buffers that are pushed into it "
+          "once there are no available shm memory",
+          DEFAULT_LEAKY,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
   signals[SIGNAL_CLIENT_CONNECTED] = g_signal_new ("client-connected",
       GST_TYPE_SHM_SINK, G_SIGNAL_RUN_LAST, 0, NULL, NULL,
       g_cclosure_marshal_VOID__INT, G_TYPE_NONE, 1, G_TYPE_INT);
@@ -505,6 +516,12 @@
       GST_OBJECT_UNLOCK (object);
       g_cond_broadcast (&self->cond);
       break;
+    case PROP_LEAKY:
+      GST_OBJECT_LOCK (object);
+      self->leaky = g_value_get_boolean (value);
+      GST_OBJECT_UNLOCK (object);
+      g_cond_broadcast (&self->cond);
+      break;
     default:
       break;
   }
@@ -534,6 +551,9 @@
     case PROP_BUFFER_TIME:
       g_value_set_int64 (value, self->buffer_time);
       break;
+    case PROP_LEAKY:
+      g_value_set_boolean (value, self->leaky);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -728,6 +748,12 @@
     while ((memory =
             gst_shm_sink_allocator_alloc_locked (self->allocator,
                 gst_buffer_get_size (buf), &self->params)) == NULL) {
+      if (self->leaky) {
+        GST_DEBUG_OBJECT (self, "No shared memory available, skip buffer");
+        GST_OBJECT_UNLOCK (self);
+        return GST_FLOW_OK;
+      }
+
       g_cond_wait (&self->cond, GST_OBJECT_GET_LOCK (self));
       if (self->unlock) {
         GST_OBJECT_UNLOCK (self);
@@ -753,6 +779,13 @@
       }
     }
 
+    if (!self->clients) {
+      GST_DEBUG_OBJECT (self, "No clients connected, skip buffer");
+      GST_OBJECT_UNLOCK (self);
+      gst_memory_unref (memory);
+      return GST_FLOW_OK;
+    }
+
     if (!gst_memory_map (memory, &map, GST_MAP_WRITE)) {
       GST_ELEMENT_ERROR (self, STREAM, FAILED,
           (NULL), ("Failed to map memory"));
@@ -1002,10 +1035,112 @@
 gst_shm_sink_propose_allocation (GstBaseSink * sink, GstQuery * query)
 {
   GstShmSink *self = GST_SHM_SINK (sink);
+  GstCaps *caps = NULL;
+  gboolean need_pool = FALSE;
+  guint pool_count = 0;
+  guint params_count = 0;
+  guint buffer_size = 0;
+  guint min_buffers = 0;
+  guint max_buffers = 0;
+  guint buffer_size_tmp = 0;
+  guint prefix = 0;
+  guint padding = 0;
+  guint align = 0;
+  GstVideoInfo info;
+  GstAllocationParams params;
+  GstStructure *config = NULL;
+  GstBufferPool *pool = NULL;
 
-  if (self->allocator)
-    gst_query_add_allocation_param (query, GST_ALLOCATOR (self->allocator),
-        NULL);
+  // propose buffer pool if possible
+  gst_query_parse_allocation (query, &caps, &need_pool);
+
+  if (need_pool == FALSE) {
+    GST_WARNING_OBJECT (self, "No pool requested");
+    return FALSE;
+  }
+
+  if (caps == NULL) {
+    GST_WARNING_OBJECT (self, "Allocation query doesn't contain caps");
+    return FALSE;
+  }
+
+  if (gst_video_info_from_caps(&info, caps) == FALSE) {
+    GST_ERROR_OBJECT (self, "Allocation query contains invalid caps");
+    return FALSE;
+  }
+
+  if (self->allocator) {
+    pool_count = gst_query_get_n_allocation_pools (query);
+
+    for (int i = 0; i < pool_count; i++) {
+      gst_query_parse_nth_allocation_pool (query, i, NULL, &buffer_size_tmp,
+          NULL, NULL);
+      buffer_size = MAX(buffer_size, buffer_size_tmp);
+    }
+
+    params_count = gst_query_get_n_allocation_params (query);
+    for (int i = 0; i < params_count; i++) {
+      gst_query_parse_nth_allocation_param (query, i, NULL, &params);
+      prefix = MAX (prefix, params.prefix);
+      padding = MAX (padding, params.padding);
+      align = MAX (align, params.align);
+    }
+
+    GST_DEBUG_OBJECT (self, "Pool count:      %u", pool_count);
+    GST_DEBUG_OBJECT (self, "Max buffer size: %u", buffer_size);
+    GST_DEBUG_OBJECT (self, "Params count:    %u", params_count);
+    GST_DEBUG_OBJECT (self, "Max prefix:      %u", prefix);
+    GST_DEBUG_OBJECT (self, "Max padding:     %u", padding);
+    GST_DEBUG_OBJECT (self, "Max align:       %u", align);
+
+    if (buffer_size == 0) {
+      buffer_size = info.size;
+    }
+
+    if (buffer_size != 0) {
+      // XXX shm allocator adds additional memory alignment, so we need count
+      // that during calculation of maximum buffer size
+      align |= gst_memory_alignment;
+
+      GST_OBJECT_LOCK (self);
+      max_buffers = self->size / (prefix + buffer_size + padding + align);
+      GST_OBJECT_UNLOCK (self);
+
+
+      pool = gst_buffer_pool_new ();
+      if (pool == NULL) {
+        GST_ERROR_OBJECT (self, "Can not create gst buffer pool");
+        return FALSE;
+      }
+      
+      config = gst_buffer_pool_get_config (pool);
+
+      gst_buffer_pool_config_set_allocator (config,
+          GST_ALLOCATOR (self->allocator), NULL);
+      gst_buffer_pool_config_set_params (config, caps, buffer_size, min_buffers,
+          max_buffers);
+
+      if (gst_buffer_pool_set_config (pool, config) == FALSE) {
+        GST_ERROR_OBJECT (self, "Can not set config for pool");
+        gst_object_unref(pool);
+        return FALSE;
+      }
+
+      GST_DEBUG_OBJECT (self, "Add allocation pool: size %u, min %u, max %u",
+          buffer_size, min_buffers, max_buffers);
+
+      gst_buffer_pool_set_active (pool, TRUE);
+
+      gst_query_add_allocation_pool (query, pool, buffer_size, min_buffers,
+          max_buffers);
+
+      gst_object_unref (pool);
+    } else {
+      GST_WARNING_OBJECT (self, "Can not calculate buffer size for buffer pool,"
+          " skip buffer pool creation, that can hurt perfomance!!!");
+      return FALSE;
+    }
+  }
 
   return TRUE;
 }
diff -Naru shm/gstshmsink.h /tmp/shm/gstshmsink.h
--- shm/gstshmsink.h	2023-06-27 18:36:41.815725004 +0200
+++ /tmp/shm/gstshmsink.h	2023-06-27 18:36:28.183575764 +0200
@@ -59,6 +59,7 @@
   GstPoll *poll;
   GstPollFD serverpollfd;
 
+  gboolean leaky;
   gboolean wait_for_connection;
   gboolean stop;
   gboolean unlock;
diff -Naru shm/Makefile.am /tmp/shm/Makefile.am
--- shm/Makefile.am	2023-06-27 18:36:41.811724960 +0200
+++ /tmp/shm/Makefile.am	2023-06-27 18:36:28.183575764 +0200
@@ -3,6 +3,6 @@
 libgstshm_la_SOURCES = shmpipe.c shmalloc.c gstshm.c gstshmsrc.c gstshmsink.c
 libgstshm_la_CFLAGS = $(GST_PLUGINS_BAD_CFLAGS) $(GST_CFLAGS) -DSHM_PIPE_USE_GLIB
 libgstshm_la_LDFLAGS = $(GST_PLUGIN_LDFLAGS)
-libgstshm_la_LIBADD = $(GST_LIBS) $(GST_BASE_LIBS) $(SHM_LIBS)
+libgstshm_la_LIBADD = $(GST_LIBS) $(GST_BASE_LIBS) $(SHM_LIBS) -lgstvideo-$(GST_API_VERSION)
 
 noinst_HEADERS = gstshmsrc.h gstshmsink.h shmpipe.h  shmalloc.h
diff -Naru shm/meson.build /tmp/shm/meson.build
--- shm/meson.build	2023-06-27 18:36:41.815725004 +0200
+++ /tmp/shm/meson.build	2023-06-27 18:36:28.187575808 +0200
@@ -24,7 +24,7 @@
     shm_sources,
     c_args : gst_plugins_bad_args + ['-DSHM_PIPE_USE_GLIB'],
     include_directories : [configinc],
-    dependencies : shm_deps,
+    dependencies : [shm_deps, gstvideo_dep],
     install : true,
     install_dir : plugins_install_dir,
   )
diff -Naru shm/shmpipe.c /tmp/shm/shmpipe.c
--- shm/shmpipe.c	2023-06-27 18:36:41.815725004 +0200
+++ /tmp/shm/shmpipe.c	2023-06-27 18:36:28.183575764 +0200
@@ -721,6 +721,7 @@
 {
   ShmBuffer *buf = NULL, *prev_buf = NULL;
   struct CommandBuffer cb;
+  int i = 0;
 
   if (!recv_command (client->fd, &cb))
     return -1;
@@ -731,7 +732,36 @@
       for (buf = self->buffers; buf; buf = buf->next) {
         if (buf->shm_area->id == cb.area_id &&
             buf->offset == cb.payload.ack_buffer.offset) {
-          return sp_shmbuf_dec (self, buf, prev_buf, client, tag);
+          // XXX in case if shm allocator is used in buffer pools we can have
+          // situation, when some element (like videorate) before shmsink
+          // produces duplicated buffers. If that duplicates are just
+          // references, then they share same memory segment, so area_id is
+          // identical for both shm buffers. As result: shmsink pushes two
+          // identical shm buffers into that queue and client also will report
+          // about using same memory segment twice. In case when there are
+          // two clients, one client can report about using both shm buffers
+          // (original and duplicate) before second client will report about
+          // using first shm buffer:
+          //
+          // send buffer ->
+          // send buffer duplicate ->
+          // first client receives buffer ->
+          // first client receives duplicate ->
+          // second client receives buffer ->
+          // second client receives duplicate ->
+          // first client report that buffer is not needed anymore ->
+          // first found buffer in registered buffers is decremented, but not
+          // removed, because there is second client that still requires it ->
+          // first client report that duplicate is not needed anymore ->
+          // now first found buffer in registered buffers isn't assigned to
+          // first client anymore, only to second client, so we should ignore
+          // that buffer and go forward in the queue and search for duplicate
+
+          for (i = 0; i < buf->num_clients; i++) {
+            if (buf->clients[i] == client->fd) {
+              return sp_shmbuf_dec (self, buf, prev_buf, client, tag);
+            }
+          }
         }
         prev_buf = buf;
       }
